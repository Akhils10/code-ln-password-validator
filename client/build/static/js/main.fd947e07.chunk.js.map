{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getIPAddress","fetch","then","response","json","geoplugin_request","saveDataInDb","data","axios","post","res","console","log","handleSubmit","e","preventDefault","email","refs","value","password","err","state","attempt","setState","attempts","length","search","charAt","ipAddress","retry","timeToWait","Date","getTime","timeWaiting","sameEmail","get","catch","error","react_default","a","createElement","className","onSubmit","type","required","ref","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fd947e07.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\nimport EmailSender from './email';\n\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.css'\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    \n    this.state = {\n      email: '',\n      password: '',\n      attempts: 0,\n      ipAddress: '',\n      timeWaiting: '',\n      retry: '',\n      err: '',\n      sameEmail: false\n    }\n\n  }\n\n  getIPAddress = () => {\n    fetch('http://www.geoplugin.net/json.gp')\n    .then(response => response.json())\n    .then(response => {\n      return response.geoplugin_request;\n    });\n  }\n\n  componentDidMount(){\n    this.setState({ipAddress: this.getIPAddress()})\n    //EmailSender('philipakhilome@gmail.com', 'Testing email message', 'Hi, Welcome to codeln');\n  }\n\n  componentWillUpdate(){\n    axios.get('http://localhost:4000/login')\n      .then(response => {\n        //console.log(...response.data)\n      })\n      .catch(function (error) {\n          console.log(error);\n      })\n  }\n\n  saveDataInDb = (data) => {\n    axios.post('http://localhost:4000/login/insert', data)\n            .then(res => console.log(res.data));\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let email = this.refs.email.value;\n    let password = this.refs.password.value;\n    let err = '';\n\n    // save the entries in db\n    const data = { \"email\" : email, \"password\" : password, \"ipAddress\" : this.getIPAddress(), \"attempts\" : this.state.attempt, \"status\" : 'unsuccessful' }\n    //this.saveDataInDb(data);\n\n    this.setState({\n      email: email,\n      password: password,\n      attempts: this.state.attempts + 1\n    })\n\n    // Defining validation rules\n    if(password.length < 16){\n      err = 'Password length should be 16 or more characters';\n    }\n    if(password.search(/[\\W\\S]/) !== 2){\n      err += 'password must contain 2 symbols';\n    }\n    if (password.search(/[0-9]/) !== 3){\n      err += 'password must contain 3 numbers';\n    }\n    if(password.search(/[a-z]/g) < 0){\n      err += 'password must contain a lowercase letter';\n    }\n    if(password.charAt(0).search(/[A-Z]/g) < 0 || password.charAt(1).search(/[A-Z]/g) < 0){\n      err +='The first 2 chars must be upper case letters';\n    }\n    if(err !== \"\") this.setState({err: err});\n\n    if(this.state.attempts >= 3){\n      // check if ipaddress is the same\n      if(this.getIPAddress() === this.state.ipAddress && email === this.state.email){\n        this.setState({retry: 'Please retry in 5 minutes time'})\n        const timeToWait = new Date(new Date().getTime() + 5*60000);\n        this.setState({timeWaiting: timeToWait})\n\n        // send email to user\n        \n        // Email.send({\n        //     SecureToken : \"9b450c88-d1cf-413b-9afe-ad475349a680\",\n        //     To : this.state.email,\n        //     From : \"test@codeln-test.com\",\n        //     Subject : \"Security Alert\",\n        //     Body : `someone is currently trying to login to your account on codeln-test using your email address\n        //     Please confirm if this action was from you. Did you forget your password, you can request for a new password using this email address\n        //     <br> \n        //     IP ADDRESS: ${this.state.ipAddress}`\n        // }).then(\n        //   message => {alert(message)\n        //   console.log(message)\n        //   });  \n      }\n\n      if(this.state.retry !== \"\" && this.state.timeWaiting !== new Date() && email <= this.state.email){\n          this.setState({retry: 'Sorry, You must wait 5 minutes before retrying with the same email address'})\n      }\n    }\n  }\n\n  render() {\n    \n    return (\n      <div className=\"container\">\n        <h3>Welcome, Please enter your login details</h3>\n        <hr/>\n        {\n          this.state.err !== \"\" &&\n            <div className=\"alert alert-warning\">{this.state.err}</div>\n        }\n        {\n          this.state.retry !== \"\" &&\n          <div className=\"alert alert-danger\">{this.state.retry}</div>\n        }\n        \n        <form onSubmit={this.handleSubmit}>\n            <fieldset>\n                  <div className=\"form-group\">\n                      <label>Email</label>\n                      <input type=\"email\" className=\"form-control\" required ref=\"email\" placeholder=\"Email address\"/>\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Password</label>\n                      <input type=\"password\" className=\"form-control\" required ref=\"password\" placeholder=\"Password\"/>\n                      <small>Your password must contain lower and uppercase letters, numbers and at least 2 symbols</small>\n                  </div>\n                  <div className=\"form-group\">\n                    <input type=\"submit\" className=\"btn btn-primary btn-block\" />\n                  </div>\n              </fieldset>\n\n          </form>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getIPAddress","fetch","then","response","json","geoplugin_request","saveDataInDb","data","axios","post","res","console","log","sendEmailAlert","receiver","subject","msg","from","to","text","require","mailgun","apiKey","domain","host","messages","send","error","body","handleSubmit","e","preventDefault","email","refs","value","password","err","setState","attempts","state","length","search","charAt","ipAddress","retry","timeToWait","Date","getTime","timeWaiting","sameEmail","get","catch","react_default","a","createElement","className","onSubmit","type","required","ref","placeholder","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea84a156.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios';\n\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.css'\n\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    \n    this.state = {\n      email: '',\n      password: '',\n      attempts: 0,\n      ipAddress: '',\n      timeWaiting: '',\n      retry: '',\n      err: '',\n      sameEmail: false\n    }\n\n  }\n\n  getIPAddress = () => {\n    fetch('https://www.geoplugin.net/json.gp')\n    .then(response => response.json())\n    .then(response => {\n      return response.geoplugin_request;\n    });\n  }\n\n  componentDidMount(){\n    this.setState({ipAddress: this.getIPAddress()})\n    //EmailSender('philipakhilome@gmail.com', 'Testing email message', 'Hi, Welcome to codeln');\n    this.sendEmailAlert('philipakhilome@gmail.com', 'Testing email message', 'Hi, Welcome to codeln');\n    //this.postEmail('philipakhilome@gmail.com', 'Testing email message', 'Hi, Welcome to codeln');\n  }\n\n  componentWillUpdate(){\n    axios.get('http://localhost:4000/login')\n      .then(response => {\n        //console.log(...response.data)\n      })\n      .catch(function (error) {\n          console.log(error);\n      })\n  }\n\n  saveDataInDb = (data) => {\n    axios.post('http://localhost:4000/login/insert', data)\n            .then(res => console.log(res.data));\n  }\n\n  sendEmailAlert = (receiver, subject, msg) => {\n    const mailgun = require(\"mailgun-js\");\n    const api_key = 'b635d543db9933d31e4fa18fd87e8946-52b0ea77-c4130739';\n    const DOMAIN = 'sandbox2336efb54c7c4886bf18e9e4044c5733.mailgun.org';\n    const host = 'api.mailgun.net';\n    const mg = mailgun({apiKey: api_key, domain: DOMAIN, host: host});\n    const data = {\n      from: 'Excited User <me@samples.mailgun.org>',\n      to: receiver,\n      subject: subject,\n      text: msg\n    };\n    mg.messages().send(data, function (error, body) {\n      if(error)\n        console.log(error)\n      console.log(body);\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let email = this.refs.email.value;\n    let password = this.refs.password.value;\n    let err = '';\n\n    // save the entries in db\n    //const data = { \"email\" : email, \"password\" : password, \"ipAddress\" : this.getIPAddress(), \"attempts\" : this.state.attempt, \"status\" : 'unsuccessful' }\n    //this.saveDataInDb(data);\n\n    this.setState({\n      email: email,\n      password: password,\n      attempts: this.state.attempts + 1\n    })\n\n    // Defining validation rules\n    if(password.length < 16){\n      err = 'Password length should be 16 or more characters';\n    }\n    if(password.search(/[\\W\\S]/) !== 2){\n      err += 'password must contain 2 symbols';\n    }\n    if (password.search(/[0-9]/) !== 3){\n      err += 'password must contain 3 numbers';\n    }\n    if(password.search(/[a-z]/g) < 0){\n      err += 'password must contain a lowercase letter';\n    }\n    if(password.charAt(0).search(/[A-Z]/g) < 0 || password.charAt(1).search(/[A-Z]/g) < 0){\n      err +='The first 2 chars must be upper case letters';\n    }\n    if(err !== \"\") this.setState({err: err});\n\n    if(this.state.attempts >= 3){\n      // check if ipaddress is the same\n      if(this.getIPAddress() === this.state.ipAddress && email === this.state.email){\n        this.setState({retry: 'Please retry in 5 minutes time'})\n        const timeToWait = new Date(new Date().getTime() + 5*60000);\n        this.setState({timeWaiting: timeToWait})\n  \n      }\n\n      if(this.state.retry !== \"\" && this.state.timeWaiting !== new Date() && email <= this.state.email){\n          this.setState({retry: 'Sorry, You must wait 5 minutes before retrying with the same email address'})\n      }\n    }\n  }\n\n  \n\n  render() {\n    \n    return (\n      <div className=\"container\">\n        <h3>Welcome, Please enter your login details</h3>\n        <hr/>\n        {\n          this.state.err !== \"\" &&\n            <div className=\"alert alert-warning\">{this.state.err}</div>\n        }\n        {\n          this.state.retry !== \"\" &&\n          <div className=\"alert alert-danger\">{this.state.retry}</div>\n        }\n        \n        <form onSubmit={this.handleSubmit}>\n            <fieldset>\n                  <div className=\"form-group\">\n                      <label>Email</label>\n                      <input type=\"email\" className=\"form-control\" required ref=\"email\" placeholder=\"Email address\"/>\n                  </div>\n                  <div className=\"form-group\">\n                      <label>Password</label>\n                      <input type=\"password\" className=\"form-control\" required ref=\"password\" placeholder=\"Password\"/>\n                      <small>Your password must contain lower and uppercase letters, numbers and at least 2 symbols</small>\n                  </div>\n                  <div className=\"form-group\">\n                    <input type=\"submit\" className=\"btn btn-primary btn-block\" />\n                  </div>\n              </fieldset>\n\n          </form>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}